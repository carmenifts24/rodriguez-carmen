# -*- coding: utf-8 -*-
"""001_El_problema.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jHw22wzw4nWcSGE283yMhpyHYSaolkBd

## Parte 1: El Problema - El Texto es solo una "Sopa de Letras" para la Computadora
"""

#texto = "La CEO de ACME, Lisa Chang, viajar√° a M√©xico para supervisar los nuevos proyectos de energ√≠a renovable. Ella se mostr√≥ muy entusiasmada."
texto = """
La inteligencia artificial transforma radicalmente la manera en que las organizaciones analizan informaci√≥n.
Algoritmos complejos permiten automatizar procesos de recopilaci√≥n, limpieza y visualizaci√≥n de datos heterog√©neos.
El aprendizaje autom√°tico, una subdisciplina fundamental, utiliza modelos estad√≠sticos para identificar patrones,
predecir comportamientos y optimizar decisiones estrat√©gicas con eficiencia y precisi√≥n.
"""
print(texto)

"""¬øC√≥mo contamos las palabras ac√°?
len(texto) nos da los caracteres, no sirve. Podr√≠amos usar texto.split(). Hagamos la prueba.
"""

palabras = texto.split()# Usar texto.split() divide el texto por espacios, pero no elimina puntuaci√≥n ni entiende contexto.
# Este enfoque b√°sico no nos permite analizar con precisi√≥n nombres, verbos o entidades.
print(palabras)

#üß† ¬øQu√© hace esto?
#Divide el texto por espacios. Es una tokenizaci√≥n b√°sica, sin comprender contexto.

#üß± Limitaciones:
#"ACME," y "Chang," quedan con coma incluida ‚Üí errores al comparar.
#Verbos conjugados, art√≠culos, puntuaci√≥n... todo se trata como si fueran iguales.
#Python no entiende roles gramaticales ni entidades.

"""Limitaciones (El "Porqu√©" necesitamos algo mejor):

- "ACME," y "Chang," tienen la coma pegada. No son palabras "limpias".
- "La" y "los" son art√≠culos. viajar√° es una forma conjugada del verbo "viajar". ¬øC√≥mo reducimos todo a su forma base para poder analizar frecuencias o temas?
- ¬øC√≥mo sabe la m√°quina que "ACME" es una organizaci√≥n y "Lisa Chang" es una persona? Para Python, ahora mismo, son solo cadenas de texto id√©nticas a "proyectos".

## Parte 2: La Soluci√≥n - spaCy, el Int√©rprete Ling√º√≠stico
"""

!pip install spacy -q
!python -m spacy download es_core_news_sm -q

import spacy
# spacy transforma el texto en un objeto "Doc", que contiene tokens, lemas, entidades, roles gramaticales y m√°s.
# Este procesamiento permite trabajar con el texto de forma estructurada y ling√º√≠sticamente informada.

# Cargar el modelo de espa√±ol
nlp = spacy.load("es_core_news_sm")#carga el modelo en espa√±ol preentrenado.

# Procesar nuestro texto
doc = nlp(texto)#convierte el texto en un objeto Doc que spaCy puede analizar (tokenizar, etiquetar, lematizar, etc.)

print(doc)

"""## Parte 3: Desglosando el Objeto Doc - Los Fundamentos de NLP en Acci√≥n

**Tokenizaci√≥n (La Unidad M√≠nima)**

Definici√≥n: Un token es la unidad m√≠nima de texto con significado (una palabra, un n√∫mero, un signo de puntuaci√≥n).
"""

for token in doc:
    print(token.text)

#¬øQu√© es un token? Es la unidad m√≠nima significativa del texto: puede ser una palabra, n√∫mero o puntuaci√≥n.
# Cada token representa una palabra o signo de puntuaci√≥n.
# spaCy hace una tokenizaci√≥n inteligente, separando puntuaci√≥n de las palabras.

"""**Lematizaci√≥n (La Ra√≠z de la Palabra)**

Definici√≥n: El "lema" es la forma can√≥nica o de diccionario de una palabra. Es la clave para agrupar palabras con el mismo significado.
"""

print("PALABRA\t\tLEMA")
print("-------\t\t----")
for token in doc:
    # Imprimimos el texto del token y su lema
    print(f"{token.text:<15}\t{token.lemma_}")

# Lematizaci√≥n: reduce una palabra a su forma base.
# Permite agrupar diferentes formas verbales o plurales para an√°lisis m√°s uniforme.
#¬øQu√© es un lema? Es la forma base o de diccionario de una palabra. Ej: "viajar√°" ‚Üí "viajar"
#Muy √∫til para agrupar formas distintas de una palabra bajo el mismo concepto.

"""**Part-of-Speech (POS) Tagging (El Rol Gramatical)**

Definici√≥n: Etiquetar cada palabra seg√∫n su funci√≥n gramatical (Sustantivo, Verbo, Adjetivo, etc.).
"""

print("PALABRA\t\tPOS\t\tEXPLICACI√ìN")
print("-------\t\t---\t\t-----------")
for token in doc:
    print(f"{token.text:<15}\t{token.pos_:<10}\t{spacy.explain(token.pos_)}")

#üß† ¬øQu√© es POS (Part-of-Speech)? El rol gramatical de una palabra en una oraci√≥n: sustantivo, verbo, adjetivo, etc.
# POS tagging: asigna una categor√≠a gramatical a cada palabra.
# Esto ayuda a entender la estructura sint√°ctica del texto.
# Ejemplo: distinguir entre "correr" como verbo o como sustantivo.